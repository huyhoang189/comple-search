const { Succeed, Created } = require("../utils/response/success.response");
const MalwareService = require("../services/malware.service");
const {
  NotFoundError,
  ForbiddenError,
} = require("../utils/response/error.response");
const simplifyData = require("../utils/simplifyData");

const malwareService = new MalwareService();

const fields = ["_id", "name", "sign"];

class MalwareController {
  getAll = async (req, res, next) => {
    const { offset, limit } = req.pagination;
    const { keyword } = req.query;
    const { malwares, total } = await malwareService.getAll(
      keyword,
      offset,
      limit
    );

    if (!malwares) throw new NotFoundError("Not found malwares");

    //return value
    return new Succeed({
      message: "Get malwares success",
      metadata: {
        data: simplifyData(fields, malwares),
        limit,
        page: offset / limit + 1,
        total,
      },
    }).send(res);
  };

  getAllRaw = async (req, res, next) => {
    const { malwares, total } = await malwareService.getAllRaw();
    if (!malwares) throw new NotFoundError("Not found malwares");

    //return value
    return new Succeed({
      message: "Get malwares success",
      metadata: {
        data: simplifyData([...fields, "status"], malwares),
        total,
      },
    }).send(res);
  };

  getById = async (req, res, next) => {
    const { id } = req.params;
    if (!id) throw new NotFoundError("Not found Id");

    const malware = await malwareService.getById(id);
    if (!malware) throw new NotFoundError("Not found malware");

    //return value
    return new Succeed({
      message: "Get by Id",
      metadata: simplifyData(fields, malware),
    }).send(res);
  };

  create = async (req, res, next) => {
    const { name, sign } = req.body;

    const holderMalware = await malwareService.validateName(name);
    if (holderMalware.length > 0)
      throw new ForbiddenError(
        "The malware exsit! Pls update new name and shortname!"
      );

    const malware = await malwareService.create(name, sign);
    if (!malware) throw new ForbiddenError("Cannot create malware");

    //return value
    return new Created({
      message: "Create malware success",
      metadata: simplifyData(fields, malware),
    }).send(res);
  };

  update = async (req, res, next) => {
    const { id } = req.params;
    const payload = req.body;

    const malware = await malwareService.updateItem(id, payload);
    if (!malware) throw new ForbiddenError("update malware error");

    //return value
    return new Succeed({
      message: "Update malware success",
      metadata: simplifyData(fields, malware),
    }).send(res);
  };

  delete = async (req, res, next) => {
    const { id } = req.params;
    const malware = await malwareService.deleteItem(id);
    if (!malware) throw new ForbiddenError("Cannot delete malware");

    //return value
    return new Succeed({
      message: "delete success malware",
      metadata: simplifyData(fields, malware),
    }).send(res);
  };
}

module.exports = MalwareController;
